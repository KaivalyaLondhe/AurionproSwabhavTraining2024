package com.aurionpro.structural.composite.model;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Stream;

public class CompositeOfComponents implements ComponentsOfComputer{
	private String name;
	List<ComponentsOfComputer> components = new ArrayList<>();
	
	
	
	public CompositeOfComponents(String name) {
		super();
		this.name = name;
	}
	public void addComponent(ComponentsOfComputer component) {
		components.add(component);
	}
	public void removeComponent(ComponentsOfComputer component) {
		components.remove(component);
	}
	public void getTotalPrice() {
		Stream price = components.stream()
								      .map((component)->component.getPrice());
		int totalPrice = (int) price.reduce(0,(component1, component2) -> ((CompositeOfComponents) component1).getPrice()-((CompositeOfComponents) component2).getPrice());
	}
	@Override
	public int getPrice() {
		// TODO Auto-generated method stub
		
		for(ComponentsOfComponent component: components) {
			return 
		}
	}
	@Override
	public void display() {
		for(ComponentsOfComputer component : components) {
			component.display();
		}
	}

}
